{
	"info": {
		"_postman_id": "8a7290fb-d9b9-4cc9-b776-86f57357ae60",
		"name": "wad2-moviesApp-MERN",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Movies Invalid Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"  pm.test(\"Invalid Token: Correct Response\",  () => {\r",
							"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);\r",
							"     pm.expect(jsonData).to.be.an(\"object\");\r",
							"     pm.expect(jsonData).to.have.property(\"error\");\r",
							"  });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "bad_bearer_token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url2}}/api/movies",
					"host": [
						"{{url2}}"
					],
					"path": [
						"api",
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Account",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.clear\r",
							"pm.collectionVariables.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'))\r",
							"pm.collectionVariables.set(\"lastName\",pm.variables.replaceIn('{{$randomLastName}}'))\r",
							"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
							"pm.collectionVariables.set(\"password\",\"11aabbCC*&767888wes576576\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Add Account: Successful Response\",()=>pm.response.to.have.status(201))\r",
							"const jsonData = pm.response.json();\r",
							"  pm.test(\"Add Account: Response Object contains correct properties\",()=>{\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.firstName).to.eql(pm.collectionVariables.get(\"firstName\"));\r",
							"    pm.expect(jsonData.lastName).to.eql(pm.collectionVariables.get(\"lastName\"));\r",
							"    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get(\"email\"));\r",
							"  })"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url2}}/api/accounts",
					"host": [
						"{{url2}}"
					],
					"path": [
						"api",
						"accounts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Security Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"  pm.test(\"Get Token: Successful Response\",()=>pm.response.to.have.status(200))\r",
							"\r",
							"  pm.test(\"Get Token: Response Object contains token\",()=>{\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"    pm.expect(jsonData.token).to.be.a(\"string\");\r",
							"  })\r",
							"  pm.test(\"Get Token: Response contains correctly formatted token\",()=>{\r",
							"    const splitArray = jsonData.token.split(\" \")\r",
							"    pm.expect(splitArray[0].toLowerCase()).to.eql(\"bearer\");\r",
							"    pm.expect(splitArray[1]).length.to.be.greaterThan(25);\r",
							"    pm.collectionVariables.set(\"authToken\",splitArray[1])\r",
							"  })"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"{{email}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url2}}/api/accounts/security/token",
					"host": [
						"{{url2}}"
					],
					"path": [
						"api",
						"accounts",
						"security",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Movies Valid Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get Movies: Status code is 200\",  ()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get Movies: Content-Type is correct\", function () {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Get Movies: Response time is less than 400ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Get Movies: Test movie data of response\", () => {\r",
							"  pm.expect(jsonData).to.be.an(\"object\");\r",
							"  pm.expect(jsonData.page).to.be.a(\"number\");\r",
							"  pm.expect(jsonData.results).to.be.an(\"array\").length.lessThan(21);\r",
							"  aMovie=jsonData.results[0]\r",
							"  pm.expect(aMovie).to.have.property(\"id\");\r",
							"  pm.expect(aMovie).to.have.property(\"title\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url2}}/api/movies",
					"host": [
						"{{url2}}"
					],
					"path": [
						"api",
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Movies ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Get Movies by ID: Show movie data\", () => {\r",
							"  pm.expect(jsonData).to.have.property(\"id\");\r",
							"  pm.expect(jsonData.original_title).to.be.a(\"String\");\r",
							"  pm.expect(jsonData).to.have.property(\"genres\");\r",
							" \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url2}}/api/movies/{{movieId}}",
					"host": [
						"{{url2}}"
					],
					"path": [
						"api",
						"movies",
						"{{movieId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Movies Reviews",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Get Movies Reviews: Show movie content, created_at and url\", () => {\r",
							"  pm.expect(jsonData).to.have.property(\"id\");\r",
							"  result=jsonData.results[1];\r",
							"  pm.expect(result).to.have.property(\"content\");\r",
							"  pm.expect(result).to.have.property(\"created_at\");\r",
							"  pm.expect(result).to.have.property(\"url\");\r",
							"\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url2}}/api/movies/{{movieId}}/reviews",
					"host": [
						"{{url2}}"
					],
					"path": [
						"api",
						"movies",
						"{{movieId}}",
						"reviews"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "authToken",
			"value": ""
		}
	]
}